export var Alert: {
    new (level: any, desc: any): {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    level: {
        "__#3@#reverse": {};
        "__#3@#maxvalue": any;
        "__#3@#class": any;
        "__#3@#byteLength": any;
        /**
         * return keys or properties
         * @returns {any[]} [any]
         */
        keys(): any[];
        /**
         * return values
         * @returns {any[]} [any]
         */
        values(): any[];
        /**
         * return key for value supplied or null if not found
         * @param {any} value
         * @returns {any} key
         */
        key(value: any): any;
        /**
         * return value for key supplied or null if not found
         * @param {any} key
         * @returns {any} value
         */
        value(key: any): any;
        maxvalue(): any;
        "__#3@#uintOrArrayOfByte"(value: any): any;
        "__#3@#wrap"(value: any): any;
    };
    description: {
        "__#3@#reverse": {};
        "__#3@#maxvalue": any;
        "__#3@#class": any;
        "__#3@#byteLength": any;
        /**
         * return keys or properties
         * @returns {any[]} [any]
         */
        keys(): any[];
        /**
         * return values
         * @returns {any[]} [any]
         */
        values(): any[];
        /**
         * return key for value supplied or null if not found
         * @param {any} value
         * @returns {any} key
         */
        key(value: any): any;
        /**
         * return value for key supplied or null if not found
         * @param {any} key
         * @returns {any} value
         */
        value(key: any): any;
        maxvalue(): any;
        "__#3@#uintOrArrayOfByte"(value: any): any;
        "__#3@#wrap"(value: any): any;
    };
    close_notify: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unexpected_message: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    bad_record_mac: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    decryption_failed_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    record_overflow: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    decompression_failure_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    handshake_failure: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    no_certificate_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    bad_certificate: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unsupported_certificate: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    certificate_revoked: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    certificate_expired: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    certificate_unknown: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    illegal_parameter: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unknown_ca: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    access_denied: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    decode_error: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    decrypt_error: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    export_restriction_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    protocol_version: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    insufficient_security: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    internal_error: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    inappropriate_fallback: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    user_canceled: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    no_renegotiation_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    missing_extension: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unsupported_extension: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    certificate_unobtainable_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unrecognized_name: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    bad_certificate_status_response: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    bad_certificate_hash_value_RESERVED: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    unknown_psk_identity: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    certificate_required: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    no_application_protocol: {
        [index: number]: number;
        /**
         * return the meaning of alert message in human readable format
         * @returns {string} formated as`"alert[code]-description[code]"`
         */
        meaning(): string;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Certificate: {
    new (certificate_list: {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }[], certificate_request_context?: Uint8Array[]): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    types: {
        "__#3@#reverse": {};
        "__#3@#maxvalue": any;
        "__#3@#class": any;
        "__#3@#byteLength": any;
        /**
         * return keys or properties
         * @returns {any[]} [any]
         */
        keys(): any[];
        /**
         * return values
         * @returns {any[]} [any]
         */
        values(): any[];
        /**
         * return key for value supplied or null if not found
         * @param {any} value
         * @returns {any} key
         */
        key(value: any): any;
        /**
         * return value for key supplied or null if not found
         * @param {any} key
         * @returns {any} value
         */
        value(key: any): any;
        maxvalue(): any;
        "__#3@#uintOrArrayOfByte"(value: any): any;
        "__#3@#wrap"(value: any): any;
    };
    "new"(certificate_list: any, certificate_request_context?: {
        [index: number]: number;
        value(): any;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param  {...Uint8Array} certs
     * @returns
     */
    certificateEntries(...certs: Uint8Array[]): {
        /**
         *
         * @param  {Uint8Array} reqContexts
         * @returns
         */
        contexts(reqContexts: Uint8Array): {
            [index: number]: number;
            payload: () => {
                [index: number]: number;
                readonly sequence: {
                    type: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    length: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    message: Uint8Array;
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            handshake: () => {
                [index: number]: number;
                readonly sequence: {
                    type: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    length: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    message: Uint8Array;
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            /**
            *
            * @returns Hanshake message
            */
            wrap(): {
                [index: number]: number;
                readonly sequence: {
                    type: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    length: {
                        [index: number]: number;
                        value(): any;
                        readonly BYTES_PER_ELEMENT: number;
                        readonly buffer: ArrayBufferLike;
                        readonly byteLength: number;
                        readonly byteOffset: number;
                        copyWithin(target: number, start: number, end?: number): any;
                        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        fill(value: number, start?: number, end?: number): any;
                        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                        indexOf(searchElement: number, fromIndex?: number): number;
                        join(separator?: string): string;
                        lastIndexOf(searchElement: number, fromIndex?: number): number;
                        readonly length: number;
                        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                        reverse(): Uint8Array;
                        set(array: ArrayLike<number>, offset?: number): void;
                        slice(start?: number, end?: number): Uint8Array;
                        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                        sort(compareFn?: (a: number, b: number) => number): any;
                        subarray(begin?: number, end?: number): Uint8Array;
                        toLocaleString(): string;
                        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                        toString(): string;
                        valueOf(): Uint8Array;
                        entries(): ArrayIterator<[number, number]>;
                        keys(): ArrayIterator<number>;
                        values(): ArrayIterator<number>;
                        includes(searchElement: number, fromIndex?: number): boolean;
                        at(index: number): number | undefined;
                        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                        toReversed(): Uint8Array;
                        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                        with(index: number, value: number): Uint8Array;
                        [Symbol.iterator](): ArrayIterator<number>;
                        readonly [Symbol.toStringTag]: "Uint8Array";
                    };
                    message: Uint8Array;
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CertificateAuthoritiesExtension: {
    new (...authority: {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }[]): {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CertificateEntry: {
    new (certificate: Uint8Array, extensions?: {
        [index: number]: number;
        value(): any;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }): {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CertificateRequest: {
    new (signature_algorithms?: Uint8Array): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {Uint8Array} signature_algorithms - Uint8Array of signature algorithm
     */
    "new"(signature_algorithms?: Uint8Array): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CertificateVerify: {
    new (algorithm: Uint8Array, signature: Uint8Array): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    algorithm: {
        ecdsa_secp256r1_sha256: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        ecdsa_secp384r1_sha384: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        ecdsa_secp521r1_sha512: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_rsae_sha256: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_rsae_sha384: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_rsae_sha512: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_pss_sha256: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_pss_sha384: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        rsa_pss_pss_sha512: {
            /**
             *
             * @param {Uint8Array} signature
             * @returns
             */
            signature(...signatures: any[]): {
                [index: number]: number;
                payload: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                handshake: () => {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                /**
                *
                * @returns Hanshake message
                */
                wrap(): {
                    [index: number]: number;
                    readonly sequence: {
                        type: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        length: {
                            [index: number]: number;
                            value(): any;
                            readonly BYTES_PER_ELEMENT: number;
                            readonly buffer: ArrayBufferLike;
                            readonly byteLength: number;
                            readonly byteOffset: number;
                            copyWithin(target: number, start: number, end?: number): any;
                            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            fill(value: number, start?: number, end?: number): any;
                            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                            indexOf(searchElement: number, fromIndex?: number): number;
                            join(separator?: string): string;
                            lastIndexOf(searchElement: number, fromIndex?: number): number;
                            readonly length: number;
                            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                            reverse(): Uint8Array;
                            set(array: ArrayLike<number>, offset?: number): void;
                            slice(start?: number, end?: number): Uint8Array;
                            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                            sort(compareFn?: (a: number, b: number) => number): any;
                            subarray(begin?: number, end?: number): Uint8Array;
                            toLocaleString(): string;
                            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                            toString(): string;
                            valueOf(): Uint8Array;
                            entries(): ArrayIterator<[number, number]>;
                            keys(): ArrayIterator<number>;
                            values(): ArrayIterator<number>;
                            includes(searchElement: number, fromIndex?: number): boolean;
                            at(index: number): number | undefined;
                            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                            toReversed(): Uint8Array;
                            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                            with(index: number, value: number): Uint8Array;
                            [Symbol.iterator](): ArrayIterator<number>;
                            readonly [Symbol.toStringTag]: "Uint8Array";
                        };
                        message: Uint8Array;
                    };
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    "new"(algorithm: any, signature: any): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Certificate_extension_oid: {
    new (...oids: Uint8Array[]): {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {number} m - the minimum length of byte
     * @returns
     */
    min(m: number): {
        /**
         *
         * @param {number} M - the maximum of byte length
         * @returns
         */
        max(M: number): {
            /**
             *
             * @param {...Uint8Array} b
             */
            byte(...b: Uint8Array[]): {
                [index: number]: number;
                "__#2@#member": any[];
                "__#2@#min": number;
                "__#2@#max": number;
                readonly member: any[];
                readonly min: number;
                readonly max: number;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Certificate_extension_values: {
    new (...values: Uint8Array[]): {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {number} m - the minimum length of byte
     * @returns
     */
    min(m: number): {
        /**
         *
         * @param {number} M - the maximum of byte length
         * @returns
         */
        max(M: number): {
            /**
             *
             * @param {...Uint8Array} b
             */
            byte(...b: Uint8Array[]): {
                [index: number]: number;
                "__#2@#member": any[];
                "__#2@#min": number;
                "__#2@#max": number;
                readonly member: any[];
                readonly min: number;
                readonly max: number;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var ChangeCipherSpec: {
    new (): {
        [index: number]: number;
        value(): any;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    "new"(): {
        [index: number]: number;
        value(): any;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CipherSuite: {
    new (code?: 1 | 2): {
        [index: number]: number;
        meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
        readonly AEAD: -1 | 128 | 256;
        readonly SHA: -1 | 256 | 384;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    TLS_AES_128_GCM_SHA256: {
        [index: number]: number;
        meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
        readonly AEAD: -1 | 128 | 256;
        readonly SHA: -1 | 256 | 384;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    TLS_AES_256_GCM_SHA384: {
        [index: number]: number;
        meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
        readonly AEAD: -1 | 128 | 256;
        readonly SHA: -1 | 256 | 384;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var CipherSuites: {
    new (): {
        [index: number]: number;
        ciphers: {
            TLS_AES_128_GCM_SHA256: {
                [index: number]: number;
                meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
                readonly AEAD: -1 | 128 | 256;
                readonly SHA: -1 | 256 | 384;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            TLS_AES_256_GCM_SHA384: {
                [index: number]: number;
                meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
                readonly AEAD: -1 | 128 | 256;
                readonly SHA: -1 | 256 | 384;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    "new"(): {
        [index: number]: number;
        ciphers: {
            TLS_AES_128_GCM_SHA256: {
                [index: number]: number;
                meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
                readonly AEAD: -1 | 128 | 256;
                readonly SHA: -1 | 256 | 384;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            TLS_AES_256_GCM_SHA384: {
                [index: number]: number;
                meaning(): "TLS_AES_128_GCM_SHA256[0x13, 0x01]" | "TLS_AES_256_GCM_SHA384[0x13, 0x02]";
                readonly AEAD: -1 | 128 | 256;
                readonly SHA: -1 | 256 | 384;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {number} m - the minimum length of byte
     * @returns
     */
    min(m: number): {
        /**
         *
         * @param {number} M - the maximum of byte length
         * @returns
         */
        max(M: number): {
            /**
             *
             * @param {...Uint8Array} b
             */
            byte(...b: Uint8Array[]): {
                [index: number]: number;
                "__#2@#member": any[];
                "__#2@#min": number;
                "__#2@#max": number;
                readonly member: any[];
                readonly min: number;
                readonly max: number;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var ClientHello: {
    new (...serverNames: string[]): {
        [index: number]: number;
        clientShares: any;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        sessionId: Uint8Array;
        cipherSuites: Uint8Array;
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param  {...string} serverNames
     * @returns Promise for ClientHello
     */
    "new"(...serverNames: string[]): {
        [index: number]: number;
        clientShares: any;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        sessionId: Uint8Array;
        cipherSuites: Uint8Array;
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var ClientShares: {
    new (): {};
    keys: any;
    keyShareClientHello(): Promise<any>;
};
export var DistinguishedName: {
    new (...distinguishedName: Uint8Array[]): {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {number} m - the minimum length of byte
     * @returns
     */
    min(m: number): {
        /**
         *
         * @param {number} M - the maximum of byte length
         * @returns
         */
        max(M: number): {
            /**
             *
             * @param {...Uint8Array} b
             */
            byte(...b: Uint8Array[]): {
                [index: number]: number;
                "__#2@#member": any[];
                "__#2@#min": number;
                "__#2@#max": number;
                readonly member: any[];
                readonly min: number;
                readonly max: number;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var EncryptedExtensions: {
    new (...extensions: {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }[]): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    "new"(...extensions: any[]): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var EndOfEarlyData: {
    new (): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    "new"(): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
         *
         * @returns Hanshake message
         */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Enum: {
    new (object: {
        any: any;
    }): {
        "__#3@#reverse": {};
        "__#3@#maxvalue": any;
        "__#3@#class": any;
        "__#3@#byteLength": any;
        /**
         * return keys or properties
         * @returns {any[]} [any]
         */
        keys(): any[];
        /**
         * return values
         * @returns {any[]} [any]
         */
        values(): any[];
        /**
         * return key for value supplied or null if not found
         * @param {any} value
         * @returns {any} key
         */
        key(value: any): any;
        /**
         * return value for key supplied or null if not found
         * @param {any} key
         * @returns {any} value
         */
        value(key: any): any;
        maxvalue(): any;
        "__#3@#uintOrArrayOfByte"(value: any): any;
        "__#3@#wrap"(value: any): any;
    };
    max: symbol;
    class: symbol;
};
export var Extension: {
    new (extension_data: Uint8Array, extensionType: number): {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    types: any;
    /**
     *
     * @param {number} extensionType
     * @param {Uint8Array} extension_data
     */
    "new"(extension_data: Uint8Array, extensionType: number): {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    extensions: {
        server_name: {
            /**
             *
             * @param  {...string} serverName
             * @returns Extension
             */
            serverNames(...serverName: string[]): {
                [index: number]: number;
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        supported_groups: {
            [index: number]: number;
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        signature_algorithms: {
            [index: number]: number;
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        supported_versions: {
            client: {
                [index: number]: number;
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
            server: {
                [index: number]: number;
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
        psk_key_exchange_modes: {
            [index: number]: number;
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        key_share: {
            client(): Promise<{
                [index: number]: number;
                "__#1@#member": Uint8Array[];
                /**
                 *
                 * @returns {Uint8Array[]} array of Uint8Array
                 */
                readonly member: Uint8Array[];
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            }>;
            server: {
                x25519(): Promise<{
                    [index: number]: number;
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                }>;
                p521(): Promise<{
                    [index: number]: number;
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                }>;
                p384(): Promise<{
                    [index: number]: number;
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                }>;
                p256(): Promise<{
                    [index: number]: number;
                    "__#1@#member": Uint8Array[];
                    /**
                     *
                     * @returns {Uint8Array[]} array of Uint8Array
                     */
                    readonly member: Uint8Array[];
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                }>;
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Extensions: {
    new (m: number, M: number, ...extensions: {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }[]): {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     * @param {number} m - minimum length
     * @param {number} M - maximum length
     * @param  {...Extension} extensions
     */
    "new"(m: number, M: number, ...extensions: {
        [index: number]: number;
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    }[]): {
        [index: number]: number;
        "__#2@#member": any[];
        "__#2@#min": number;
        "__#2@#max": number;
        readonly member: any[];
        readonly min: number;
        readonly max: number;
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    /**
     *
     * @param {number} m - the minimum length of byte
     * @returns
     */
    min(m: number): {
        /**
         *
         * @param {number} M - the maximum of byte length
         * @returns
         */
        max(M: number): {
            /**
             *
             * @param {...Uint8Array} b
             */
            byte(...b: Uint8Array[]): {
                [index: number]: number;
                "__#2@#member": any[];
                "__#2@#min": number;
                "__#2@#max": number;
                readonly member: any[];
                readonly min: number;
                readonly max: number;
                readonly BYTES_PER_ELEMENT: number;
                readonly buffer: ArrayBufferLike;
                readonly byteLength: number;
                readonly byteOffset: number;
                copyWithin(target: number, start: number, end?: number): any;
                every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                fill(value: number, start?: number, end?: number): any;
                filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                indexOf(searchElement: number, fromIndex?: number): number;
                join(separator?: string): string;
                lastIndexOf(searchElement: number, fromIndex?: number): number;
                readonly length: number;
                map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                reverse(): Uint8Array;
                set(array: ArrayLike<number>, offset?: number): void;
                slice(start?: number, end?: number): Uint8Array;
                some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                sort(compareFn?: (a: number, b: number) => number): any;
                subarray(begin?: number, end?: number): Uint8Array;
                toLocaleString(): string;
                toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                toString(): string;
                valueOf(): Uint8Array;
                entries(): ArrayIterator<[number, number]>;
                keys(): ArrayIterator<number>;
                values(): ArrayIterator<number>;
                includes(searchElement: number, fromIndex?: number): boolean;
                at(index: number): number | undefined;
                findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                toReversed(): Uint8Array;
                toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                with(index: number, value: number): Uint8Array;
                [Symbol.iterator](): ArrayIterator<number>;
                readonly [Symbol.toStringTag]: "Uint8Array";
            };
        };
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Finished: {
    new (verify_data: Uint8Array): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        "__#1@#member": Uint8Array[];
        /**
         *
         * @returns {Uint8Array[]} array of Uint8Array
         */
        readonly member: Uint8Array[];
        readonly BYTES_PER_ELEMENT: number;
        readonly buffer: ArrayBufferLike;
        readonly byteLength: number;
        readonly byteOffset: number;
        copyWithin(target: number, start: number, end?: number): any;
        every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        fill(value: number, start?: number, end?: number): any;
        filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
        find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
        findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
        forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
        indexOf(searchElement: number, fromIndex?: number): number;
        join(separator?: string): string;
        lastIndexOf(searchElement: number, fromIndex?: number): number;
        readonly length: number;
        map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
        reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
        reverse(): Uint8Array;
        set(array: ArrayLike<number>, offset?: number): void;
        slice(start?: number, end?: number): Uint8Array;
        some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
        sort(compareFn?: (a: number, b: number) => number): any;
        subarray(begin?: number, end?: number): Uint8Array;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
        toString(): string;
        valueOf(): Uint8Array;
        entries(): ArrayIterator<[number, number]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<number>;
        includes(searchElement: number, fromIndex?: number): boolean;
        at(index: number): number | undefined;
        findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
        findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
        findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
        toReversed(): Uint8Array;
        toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
        with(index: number, value: number): Uint8Array;
        [Symbol.iterator](): ArrayIterator<number>;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    "new"(verify_data: any): {
        [index: number]: number;
        payload: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        handshake: () => {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        /**
        *
        * @returns Hanshake message
        */
        wrap(): {
            [index: number]: number;
            readonly sequence: {
                type: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                length: {
                    [index: number]: number;
                    value(): any;
                    readonly BYTES_PER_ELEMENT: number;
                    readonly buffer: ArrayBufferLike;
                    readonly byteLength: number;
                    readonly byteOffset: number;
                    copyWithin(target: number, start: number, end?: number): any;
                    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    fill(value: number, start?: number, end?: number): any;
                    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
                    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
                    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
                    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
                    indexOf(searchElement: number, fromIndex?: number): number;
                    join(separator?: string): string;
                    lastIndexOf(searchElement: number, fromIndex?: number): number;
                    readonly length: number;
                    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
                    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
                    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
                    reverse(): Uint8Array;
                    set(array: ArrayLike<number>, offset?: number): void;
                    slice(start?: number, end?: number): Uint8Array;
                    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
                    sort(compareFn?: (a: number, b: number) => number): any;
                    subarray(begin?: number, end?: number): Uint8Array;
                    toLocaleString(): string;
                    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
                    toString(): string;
                    valueOf(): Uint8Array;
                    entries(): ArrayIterator<[number, number]>;
                    keys(): ArrayIterator<number>;
                    values(): ArrayIterator<number>;
                    includes(searchElement: number, fromIndex?: number): boolean;
                    at(index: number): number | undefined;
                    findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
                    findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
                    findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
                    toReversed(): Uint8Array;
                    toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
                    with(index: number, value: number): Uint8Array;
                    [Symbol.iterator](): ArrayIterator<number>;
                    readonly [Symbol.toStringTag]: "Uint8Array";
                };
                message: Uint8Array;
            };
            "__#1@#member": Uint8Array[];
            /**
             *
             * @returns {Uint8Array[]} array of Uint8Array
             */
            readonly member: Uint8Array[];
            readonly BYTES_PER_ELEMENT: number;
            readonly buffer: ArrayBufferLike;
            readonly byteLength: number;
            readonly byteOffset: number;
            copyWithin(target: number, start: number, end?: number): any;
            every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            fill(value: number, start?: number, end?: number): any;
            filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;
            find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;
            findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;
            forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;
            indexOf(searchElement: number, fromIndex?: number): number;
            join(separator?: string): string;
            lastIndexOf(searchElement: number, fromIndex?: number): number;
            readonly length: number;
            map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;
            reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;
            reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;
            reverse(): Uint8Array;
            set(array: ArrayLike<number>, offset?: number): void;
            slice(start?: number, end?: number): Uint8Array;
            some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;
            sort(compareFn?: (a: number, b: number) => number): any;
            subarray(begin?: number, end?: number): Uint8Array;
            toLocaleString(): string;
            toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;
            toString(): string;
            valueOf(): Uint8Array;
            entries(): ArrayIterator<[number, number]>;
            keys(): ArrayIterator<number>;
            values(): ArrayIterator<number>;
            includes(searchElement: number, fromIndex?: number): boolean;
            at(index: number): number | undefined;
            findLast<S extends number>(predicate: (value: number, index: number, array: Uint8Array) => value is S, thisArg?: any): S;
            findLast(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number | undefined;
            findLastIndex(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): number;
            toReversed(): Uint8Array;
            toSorted(compareFn?: (a: number, b: number) => number): Uint8Array;
            with(index: number, value: number): Uint8Array;
            [Symbol.iterator](): ArrayIterator<number>;
            readonly [Symbol.toStringTag]: "Uint8Array";
        };
        ... 40 more ...;
        readonly [Symbol.toStringTag]: "Uint8Array";
    };
    readonly BYTES_PER_ELEMENT: number;
    of(...items: number[]): Uint8Array;
    from(arrayLike: ArrayLike<number>): Uint8Array;
    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;
    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;
};
export var Fixed: {
    ...;
};
export var Handshake: {
    ...;
};
export var Key: {
    ...;
};
export var KeyShareClientHello: {
    ...;
};
export var KeyShareEntry: {
    ...;
};
export var KeyShareHelloRetryRequest: {
    ...;
};
export var KeyShareServerHello: {
    ...;
};
export var KeyUpdate: {
    ...;
};
export var Keys: {
    ...;
};
export var MessageHash: {
    ...;
};
export var Minmax: {
    ...;
};
export var NamedGroup: any;
export var NamedGroupList: {
    ...;
};
export var NewSessionTicket: {
    ...;
};
export var OIDFilter: {
    ...;
};
export var OIDFilterExtension: {
    ...;
};
export var PostHandshakeAuth: {
    ...;
};
export var ProtocolVersion: {
    ...;
};
export var PskKeyExchangeModes: {
    ...;
};
export var Random: {
    ...;
};
export var ServerHello: {
    ...;
};
export var ServerName: {
    ...;
};
export var ServerNameList: {
    ...;
};
export var ServerShare: {
    ...;
};
export var SignatureSchemeList: {
    ...;
};
export var Struct: {
    ...;
};
export var SupportedVersions: {
    ...;
};
export var TLSCiphertext: {
    ...;
};
export var TLSInnerPlaintext: {
    ...;
};
export var TLSPlaintext: {
    ...;
};
export var Uint16: {
    ...;
};
export var Uint24: {
    ...;
};
export var Uint32: {
    ...;
};
export var Uint8: {
    ...;
};
export var Uints: {
    ...;
};
export function keyShareServerHello(server_share: any): {
    ...;
};
